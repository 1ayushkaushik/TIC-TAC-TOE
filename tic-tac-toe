#include<iostream>
using namespace std;

char player='o';char ai='x';


struct moves{

  int row,col;

};


bool movesleft(char board[][3]){

for(int i=0;i<3;i++){
for(int j=0;j<3;j++){

  if(board[i][j]=='_'){return 1;}

}



}  return 0;}

char winner(char board[][3]){
for(int i=0;i<3;i++){
    if(board[i][0]==board[i][1] && board[i][2]==board[i][1]){
          if (board[i][0]=='x'){return 'x';   }
          if(board[i][0]=='o'){return 'o';  }

       }
}
for(int j=0;j<3;j++){if(board[0][j]==board[1][j] && board[2][j]==board[1][j]){

          if (board[0][j]=='x'){return 'x'; }
          if(board[0][j]=='o'){return 'o';}
}
}
if(board[0][0]==board[1][1]  && board[2][2]==board[1][1]){

      if (board[0][0]=='x'){return 'x';   }
          if(board[0][0]=='o'){return 'o';  }

}

if(board[0][2]==board[1][1]  && board[2][0]==board[1][1]){

 if (board[0][2]=='x'){return 'x';   }
          if(board[0][2]=='o'){return 'o';  }


}

return '0';

}


int minimax(char board[][3],bool ismax){
   char y=winner(board);


    if(y=='x'){return 10;}
    if(y=='o'){return -10;}
    if(!movesleft){return 0;}  //game tie

      if(ismax==true){
          int best1=-1000;
            for(int i=0;i<3;i++){
          for(int j=0;j<3;j++){
            if(board[i][j]=='_'){
                 board[i][j]='x';
                 best1=max(minimax(board,false),best1);
                   board[i][j]='_';
               }



}
  }
return best1;
}

else{
  int worst1=1000;
     for(int i=0;i<3;i++){
          for(int j=0;j<3;j++){
            if(board[i][j]=='_'){
                 board[i][j]='o';
                 worst1=min(minimax(board,true),worst1);
                       board[i][j]='_';

}

}
}
return worst1;
}
}




moves findthebestmove(char board[][3]){     //for ai
int bestval = -1000;
bool ismax;
	moves bestmove;
	bestmove.row = -1;
	bestmove.col = -1;
for(int i=0;i<3;i++){
          for(int j=0;j<3;j++){
            if(board[i][j]=='_'){


                board[i][j]='x';

                int val=minimax(board,false);
                board[i][j]='_';

               if(val>bestval){

               bestval=val;
                bestmove.row=i;
                bestmove.col=j;

               }

           }
}
}
return bestmove;
}


int main()
{
 char board[3][3]={

 {'_','_','_'},
 {'_','_','_'},
 {'_','_','_'}
                  };

for(int i=0;i<3;i++){
for(int j=0;j<3;j++){cout<<board[i][j]<<" ";}
cout<<endl;
}
cout<<endl;
/*
while(movesleft){
int i,j;
   cout<<"enter the row and column:";
    cin>>i>>j;
   board[i][j]='o';
    moves bestmove;
   bestmove=findthebestmove(board);
    board[bestmove.row][bestmove.col]='x';
    for(int i=0;i<3;i++){
    for(int j=0;j<3;j++){cout<<board[i][j]<<" ";}
       cout<<endl;
     }
  }*/
while(true){/*
int i,j;
cout<<"enter the row and column:";
cin>>i>>j;
if(board[i][j]=='_'){

    board[i][j]='o';

}*/

moves bestmove;
bestmove=findthebestmove(board);
 board[bestmove.row][bestmove.col]='x';
  for(int i=0;i<3;i++){
    for(int j=0;j<3;j++){cout<<board[i][j]<<" ";}
       cout<<endl;
 }

char y=winner(board);
if(y!='0'){

    if(y=='x'){cout<<"ai won";}
    if(y=='o'){cout<<"human won";}
    break;

}
int i,j;
cout<<"enter the row and column:";
cin>>i>>j;
board[i][j]='o';

}
}
